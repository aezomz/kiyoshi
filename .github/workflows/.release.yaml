name: release

on:
  push:
    tags:
      - v*

env:
  DOCKERHUB_REPO: aezomz/kiyoshi

concurrency:
  group: ${{github.workflow}}-${{github.head_ref || github.run_id}}
  cancel-in-progress: true

jobs:
  toolchain:
    runs-on: ubuntu-latest
    env:
      nightly: ${{(github.event.inputs.nightly == 'true' || github.event_name == 'schedule') && 'true' || ''}}
    outputs:
      toolchain: ${{steps.set_toolchain.outputs.toolchain}}
      nightly_toolchain: ${{steps.set_toolchain.outputs.nightly_toolchain}}
    steps:
      - uses: actions/checkout@v4
      - name: Set toolchain
        id: set_toolchain
        env:
          toolchain_toml: "rust-toolchain.toml"
        run: |
          if [[ -z $nightly ]] && [[ -f $toolchain_toml ]]; then
            toolchain=$(grep channel $toolchain_toml | sed -r 's/channel = "(.*)"/\1/')
            echo "using toolchain $toolchain from rust-toolchain.toml"
            echo "toolchain=$toolchain" >> "$GITHUB_OUTPUT"
            if [[ $toolchain =~ ^nightly.* ]]; then
              echo "using nightly_toolchain $toolchain"
              echo "nightly_toolchain=$toolchain" >> "$GITHUB_OUTPUT"
            else
              echo "using nightly_toolchain nightly"
              echo "nightly_toolchain=nightly" >> "$GITHUB_OUTPUT"
            fi
          else
            toolchain='nightly'
            echo "using toolchain nightly"
            echo "toolchain=nightly" >> "$GITHUB_OUTPUT"
            echo "using nightly_toolchain nightly"
            echo "nightly_toolchain=nightly" >> "$GITHUB_OUTPUT"
          fi

  check:
    runs-on: ubuntu-latest
    needs: toolchain
    steps:
      - uses: actions/checkout@v4

      - name: Install just
        uses: taiki-e/install-action@v2
        with:
          tool: just

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{needs.toolchain.outputs.toolchain}}

      - uses: Swatinem/rust-cache@v2

      - name: just check
        run: |
          rustup override set ${{needs.toolchain.outputs.toolchain}}
          just check

  fmt-check:
    runs-on: ubuntu-latest
    needs: toolchain
    steps:
      - uses: actions/checkout@v4

      - name: Install just
        uses: taiki-e/install-action@v2
        with:
          tool: just

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{needs.toolchain.outputs.nightly_toolchain}}
          components: rustfmt

      - uses: Swatinem/rust-cache@v2

      - name: just fmt-check
        run: |
          rustup override set ${{needs.toolchain.outputs.nightly_toolchain}}
          just fmt-check ''

  lint:
    runs-on: ubuntu-latest
    needs: [toolchain, check, fmt-check]
    steps:
      - uses: actions/checkout@v4

      - name: Install just
        uses: taiki-e/install-action@v2
        with:
          tool: just

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{needs.toolchain.outputs.toolchain}}
          components: clippy

      - uses: Swatinem/rust-cache@v2

      - name: just lint
        run: |
          rustup override set ${{needs.toolchain.outputs.toolchain}}
          just lint

  test:
    runs-on: ubuntu-latest
    needs: [toolchain, check, fmt-check]
    steps:
      - uses: actions/checkout@v4

      - name: Install just
        uses: taiki-e/install-action@v2
        with:
          tool: just

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{needs.toolchain.outputs.toolchain}}

      - uses: Swatinem/rust-cache@v2

      - name: just test
        run: |
          rustup override set ${{needs.toolchain.outputs.toolchain}}
          just test

  # doc:
  #   runs-on: ubuntu-latest
  #   needs: [toolchain, check, fmt-check]
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install just
  #       uses: taiki-e/install-action@v2
  #       with:
  #         tool: just

  #     - name: Install Rust
  #       uses: dtolnay/rust-toolchain@master
  #       with:
  #         toolchain: ${{needs.toolchain.outputs.nightly_toolchain}}

  #     - uses: Swatinem/rust-cache@v2

  #     - name: just doc
  #       run: |
  #         rustup override set ${{needs.toolchain.outputs.nightly_toolchain}}
  #         just doc ''

  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
    # needs: [lint, test, doc]
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4

      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Docker metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.DOCKERHUB_REPO }}
          tags: type=semver,pattern={{version}}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: Docker build and push
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{steps.meta.outputs.labels}}
          outputs: type=image,"name=${{ env.DOCKERHUB_REPO }}",push-by-digest=true,name-canonical=true,push=true
          # push: true
          # tags: ${{steps.meta.outputs.tags}}

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_REPO }}
          tags: |
            type=semver,pattern={{version}}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.DOCKERHUB_REPO }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.DOCKERHUB_REPO }}:${{ steps.meta.outputs.version }}